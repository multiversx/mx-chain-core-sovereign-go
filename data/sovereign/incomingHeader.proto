// This file holds data structures related to incoming headers from one chain(local/main/test/etc.) to a sovereign chain.
// This incoming header will be received from a notifier. In the future, this will also hold a proof of the incoming operations
syntax = "proto3";

package proto;

option go_package = "sovereign";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/multiversx/mx-chain-core-go/data/transaction/log.proto";

enum ChainID {
  MVX = 0;
  ETH = 1;
  SUI = 2;
};

message IncomingHeader {
  // For now, these are the bytes representing the marshalled header/block/checkpoint from another chain
  bytes Proof                    = 1 [(gogoproto.jsontag) = "incomingEvents,omitempty"];
  ChainID ChainID                = 2;
  // We will store each nonce/round/checkpoint/etc. as a big.Int (eth uses big ints)
  // This could actually be the round for mvx, since we will use this data in node's config to start notarization from specific checkpoint
  bytes Nonce                   = 3 [(gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  repeated Event IncomingEvents = 4 [(gogoproto.jsontag) = "incomingEvents,omitempty"];
}
