// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outGoingBridgeData.proto

package sovereign

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BridgeOperations struct {
	Data []*BridgeOutGoingData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *BridgeOperations) Reset()      { *m = BridgeOperations{} }
func (*BridgeOperations) ProtoMessage() {}
func (*BridgeOperations) Descriptor() ([]byte, []int) {
	return fileDescriptor_62fb23e431426efc, []int{0}
}
func (m *BridgeOperations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeOperations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeOperations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeOperations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeOperations.Merge(m, src)
}
func (m *BridgeOperations) XXX_Size() int {
	return m.Size()
}
func (m *BridgeOperations) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeOperations.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeOperations proto.InternalMessageInfo

func (m *BridgeOperations) GetData() []*BridgeOutGoingData {
	if m != nil {
		return m.Data
	}
	return nil
}

type BridgeOutGoingData struct {
	Type                int32                `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ChainID             int32                `protobuf:"varint,2,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Hash                []byte               `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	OutGoingOperations  []*OutGoingOperation `protobuf:"bytes,4,rep,name=OutGoingOperations,proto3" json:"OutGoingOperations,omitempty"`
	AggregatedSignature []byte               `protobuf:"bytes,5,opt,name=AggregatedSignature,proto3" json:"AggregatedSignature,omitempty"`
	LeaderSignature     []byte               `protobuf:"bytes,6,opt,name=LeaderSignature,proto3" json:"LeaderSignature,omitempty"`
	PubKeysBitmap       []byte               `protobuf:"bytes,7,opt,name=PubKeysBitmap,proto3" json:"PubKeysBitmap,omitempty"`
	Epoch               uint32               `protobuf:"varint,8,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
}

func (m *BridgeOutGoingData) Reset()      { *m = BridgeOutGoingData{} }
func (*BridgeOutGoingData) ProtoMessage() {}
func (*BridgeOutGoingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_62fb23e431426efc, []int{1}
}
func (m *BridgeOutGoingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeOutGoingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeOutGoingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeOutGoingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeOutGoingData.Merge(m, src)
}
func (m *BridgeOutGoingData) XXX_Size() int {
	return m.Size()
}
func (m *BridgeOutGoingData) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeOutGoingData.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeOutGoingData proto.InternalMessageInfo

func (m *BridgeOutGoingData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BridgeOutGoingData) GetChainID() int32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *BridgeOutGoingData) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BridgeOutGoingData) GetOutGoingOperations() []*OutGoingOperation {
	if m != nil {
		return m.OutGoingOperations
	}
	return nil
}

func (m *BridgeOutGoingData) GetAggregatedSignature() []byte {
	if m != nil {
		return m.AggregatedSignature
	}
	return nil
}

func (m *BridgeOutGoingData) GetLeaderSignature() []byte {
	if m != nil {
		return m.LeaderSignature
	}
	return nil
}

func (m *BridgeOutGoingData) GetPubKeysBitmap() []byte {
	if m != nil {
		return m.PubKeysBitmap
	}
	return nil
}

func (m *BridgeOutGoingData) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type OutGoingOperation struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *OutGoingOperation) Reset()      { *m = OutGoingOperation{} }
func (*OutGoingOperation) ProtoMessage() {}
func (*OutGoingOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_62fb23e431426efc, []int{2}
}
func (m *OutGoingOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutGoingOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutGoingOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutGoingOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutGoingOperation.Merge(m, src)
}
func (m *OutGoingOperation) XXX_Size() int {
	return m.Size()
}
func (m *OutGoingOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_OutGoingOperation.DiscardUnknown(m)
}

var xxx_messageInfo_OutGoingOperation proto.InternalMessageInfo

func (m *OutGoingOperation) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *OutGoingOperation) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BridgeOutGoingDataValidatorSetChange struct {
	PubKeyIDs [][]byte `protobuf:"bytes,1,rep,name=PubKeyIDs,proto3" json:"PubKeyIDs,omitempty"`
	Epoch     uint32   `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
}

func (m *BridgeOutGoingDataValidatorSetChange) Reset()      { *m = BridgeOutGoingDataValidatorSetChange{} }
func (*BridgeOutGoingDataValidatorSetChange) ProtoMessage() {}
func (*BridgeOutGoingDataValidatorSetChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_62fb23e431426efc, []int{3}
}
func (m *BridgeOutGoingDataValidatorSetChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeOutGoingDataValidatorSetChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeOutGoingDataValidatorSetChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeOutGoingDataValidatorSetChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeOutGoingDataValidatorSetChange.Merge(m, src)
}
func (m *BridgeOutGoingDataValidatorSetChange) XXX_Size() int {
	return m.Size()
}
func (m *BridgeOutGoingDataValidatorSetChange) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeOutGoingDataValidatorSetChange.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeOutGoingDataValidatorSetChange proto.InternalMessageInfo

func (m *BridgeOutGoingDataValidatorSetChange) GetPubKeyIDs() [][]byte {
	if m != nil {
		return m.PubKeyIDs
	}
	return nil
}

func (m *BridgeOutGoingDataValidatorSetChange) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type BridgeOperationsResponse struct {
	TxHashes []string `protobuf:"bytes,1,rep,name=TxHashes,proto3" json:"TxHashes,omitempty"`
}

func (m *BridgeOperationsResponse) Reset()      { *m = BridgeOperationsResponse{} }
func (*BridgeOperationsResponse) ProtoMessage() {}
func (*BridgeOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62fb23e431426efc, []int{4}
}
func (m *BridgeOperationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeOperationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeOperationsResponse.Merge(m, src)
}
func (m *BridgeOperationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *BridgeOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeOperationsResponse proto.InternalMessageInfo

func (m *BridgeOperationsResponse) GetTxHashes() []string {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*BridgeOperations)(nil), "sovereign.BridgeOperations")
	proto.RegisterType((*BridgeOutGoingData)(nil), "sovereign.BridgeOutGoingData")
	proto.RegisterType((*OutGoingOperation)(nil), "sovereign.OutGoingOperation")
	proto.RegisterType((*BridgeOutGoingDataValidatorSetChange)(nil), "sovereign.BridgeOutGoingDataValidatorSetChange")
	proto.RegisterType((*BridgeOperationsResponse)(nil), "sovereign.BridgeOperationsResponse")
}

func init() { proto.RegisterFile("outGoingBridgeData.proto", fileDescriptor_62fb23e431426efc) }

var fileDescriptor_62fb23e431426efc = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xd7, 0x69, 0xd2, 0x36, 0xa6, 0xe5, 0x8f, 0xe1, 0x60, 0x95, 0x62, 0x45, 0xa1, 0x87,
	0xbd, 0x24, 0x81, 0x22, 0x71, 0xe9, 0x01, 0x91, 0xa6, 0x82, 0x42, 0x25, 0xd0, 0x26, 0xe2, 0x50,
	0x71, 0x71, 0xb2, 0x23, 0xaf, 0xa5, 0x66, 0xbd, 0xf2, 0x7a, 0xab, 0xf4, 0xc6, 0x23, 0xf0, 0x18,
	0x3c, 0x04, 0x0f, 0xc0, 0x31, 0xc7, 0x1e, 0xc9, 0xe6, 0xc2, 0xb1, 0x8f, 0x80, 0xd6, 0x9b, 0x6c,
	0x42, 0xb7, 0xe2, 0x36, 0xf3, 0xcd, 0xcf, 0xe3, 0x4f, 0xe3, 0x31, 0xa6, 0x2a, 0x31, 0xef, 0x94,
	0x0c, 0x45, 0x57, 0x4b, 0x5f, 0x40, 0x8f, 0x1b, 0xde, 0x8e, 0xb4, 0x32, 0x8a, 0xd4, 0x63, 0x75,
	0x09, 0x1a, 0xa4, 0x08, 0x9b, 0x27, 0xf8, 0x61, 0x5e, 0xfe, 0x14, 0x81, 0xe6, 0x46, 0xaa, 0x30,
	0x26, 0x2f, 0x71, 0x35, 0x83, 0x29, 0x6a, 0x6c, 0xb8, 0xf7, 0x0e, 0x9f, 0xb5, 0x0b, 0xba, 0xbd,
	0x40, 0x17, 0x7d, 0x33, 0xc8, 0xb3, 0x68, 0xf3, 0x67, 0x05, 0x93, 0x72, 0x91, 0x10, 0x5c, 0x1d,
	0x5c, 0x45, 0x40, 0x51, 0x03, 0xb9, 0x35, 0xcf, 0xc6, 0x84, 0xe2, 0xad, 0xe3, 0x80, 0xcb, 0xf0,
	0xb4, 0x47, 0x2b, 0x56, 0x5e, 0xa6, 0x19, 0xfd, 0x9e, 0xc7, 0x01, 0xdd, 0x68, 0x20, 0x77, 0xc7,
	0xb3, 0x31, 0x39, 0xc3, 0x64, 0xd9, 0x71, 0xe5, 0x90, 0x56, 0xad, 0xb3, 0xfd, 0x35, 0x67, 0x25,
	0xc8, 0xbb, 0xe3, 0x1c, 0x79, 0x81, 0x1f, 0xbf, 0x15, 0x42, 0x83, 0xe0, 0x06, 0xfc, 0xbe, 0x14,
	0x21, 0x37, 0x89, 0x06, 0x5a, 0xb3, 0x17, 0xde, 0x55, 0x22, 0x2e, 0x7e, 0x70, 0x06, 0xdc, 0x07,
	0xbd, 0xa2, 0x37, 0x2d, 0x7d, 0x5b, 0x26, 0x07, 0x78, 0xf7, 0x73, 0x32, 0xfc, 0x08, 0x57, 0x71,
	0x57, 0x9a, 0x31, 0x8f, 0xe8, 0x96, 0xe5, 0xfe, 0x15, 0xc9, 0x13, 0x5c, 0x3b, 0x89, 0xd4, 0x28,
	0xa0, 0xdb, 0x0d, 0xe4, 0xee, 0x7a, 0x79, 0xd2, 0x3c, 0xc2, 0x8f, 0x4a, 0x6e, 0x8b, 0x71, 0xa0,
	0xb5, 0x71, 0x90, 0xc5, 0xd3, 0x54, 0x72, 0xcd, 0xce, 0xfe, 0x1c, 0x1f, 0x94, 0x47, 0xff, 0x85,
	0x5f, 0x48, 0x9f, 0x1b, 0xa5, 0xfb, 0x60, 0x8e, 0x03, 0x1e, 0x0a, 0x20, 0xfb, 0xb8, 0x9e, 0x7b,
	0x39, 0xed, 0xc5, 0xf6, 0x6d, 0x77, 0xbc, 0x95, 0xb0, 0x32, 0x56, 0x59, 0x37, 0xf6, 0x1a, 0xd3,
	0xdb, 0xeb, 0xe1, 0x41, 0x1c, 0xa9, 0x30, 0x06, 0xb2, 0x87, 0xb7, 0x07, 0x93, 0xcc, 0x15, 0xe4,
	0xed, 0xea, 0x5e, 0x91, 0x1f, 0x7e, 0xc5, 0xf7, 0xf3, 0x73, 0x83, 0x49, 0x1f, 0x42, 0x1f, 0x34,
	0xf9, 0x80, 0xab, 0x59, 0x44, 0x9e, 0x96, 0xd7, 0xa9, 0x68, 0xbd, 0xf7, 0xfc, 0x3f, 0xc5, 0xe5,
	0xbd, 0x4d, 0xa7, 0x9b, 0x4c, 0x67, 0xcc, 0xb9, 0x9e, 0x31, 0xe7, 0x66, 0xc6, 0xd0, 0xb7, 0x94,
	0xa1, 0x1f, 0x29, 0x43, 0xbf, 0x52, 0x86, 0xa6, 0x29, 0x43, 0xbf, 0x53, 0x86, 0xfe, 0xa4, 0xcc,
	0xb9, 0x49, 0x19, 0xfa, 0x3e, 0x67, 0xce, 0x74, 0xce, 0x9c, 0xeb, 0x39, 0x73, 0xce, 0xdf, 0x08,
	0x69, 0x82, 0x64, 0xd8, 0x1e, 0xa9, 0x71, 0x67, 0x9c, 0x5c, 0x18, 0x79, 0x09, 0x3a, 0x9e, 0x74,
	0xc6, 0x93, 0xd6, 0x28, 0x5b, 0xc0, 0xd6, 0x48, 0x69, 0x68, 0x09, 0xd5, 0xf1, 0xb9, 0xe1, 0x9d,
	0xc2, 0xc7, 0x51, 0x11, 0x0d, 0x37, 0xed, 0xef, 0x79, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0x52,
	0x22, 0xbc, 0x1a, 0x59, 0x03, 0x00, 0x00,
}

func (this *BridgeOperations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeOperations)
	if !ok {
		that2, ok := that.(BridgeOperations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *BridgeOutGoingData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeOutGoingData)
	if !ok {
		that2, ok := that.(BridgeOutGoingData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ChainID != that1.ChainID {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if len(this.OutGoingOperations) != len(that1.OutGoingOperations) {
		return false
	}
	for i := range this.OutGoingOperations {
		if !this.OutGoingOperations[i].Equal(that1.OutGoingOperations[i]) {
			return false
		}
	}
	if !bytes.Equal(this.AggregatedSignature, that1.AggregatedSignature) {
		return false
	}
	if !bytes.Equal(this.LeaderSignature, that1.LeaderSignature) {
		return false
	}
	if !bytes.Equal(this.PubKeysBitmap, that1.PubKeysBitmap) {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	return true
}
func (this *OutGoingOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutGoingOperation)
	if !ok {
		that2, ok := that.(OutGoingOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *BridgeOutGoingDataValidatorSetChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeOutGoingDataValidatorSetChange)
	if !ok {
		that2, ok := that.(BridgeOutGoingDataValidatorSetChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PubKeyIDs) != len(that1.PubKeyIDs) {
		return false
	}
	for i := range this.PubKeyIDs {
		if !bytes.Equal(this.PubKeyIDs[i], that1.PubKeyIDs[i]) {
			return false
		}
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	return true
}
func (this *BridgeOperationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeOperationsResponse)
	if !ok {
		that2, ok := that.(BridgeOperationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TxHashes) != len(that1.TxHashes) {
		return false
	}
	for i := range this.TxHashes {
		if this.TxHashes[i] != that1.TxHashes[i] {
			return false
		}
	}
	return true
}
func (this *BridgeOperations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sovereign.BridgeOperations{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BridgeOutGoingData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&sovereign.BridgeOutGoingData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ChainID: "+fmt.Sprintf("%#v", this.ChainID)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	if this.OutGoingOperations != nil {
		s = append(s, "OutGoingOperations: "+fmt.Sprintf("%#v", this.OutGoingOperations)+",\n")
	}
	s = append(s, "AggregatedSignature: "+fmt.Sprintf("%#v", this.AggregatedSignature)+",\n")
	s = append(s, "LeaderSignature: "+fmt.Sprintf("%#v", this.LeaderSignature)+",\n")
	s = append(s, "PubKeysBitmap: "+fmt.Sprintf("%#v", this.PubKeysBitmap)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutGoingOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sovereign.OutGoingOperation{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BridgeOutGoingDataValidatorSetChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sovereign.BridgeOutGoingDataValidatorSetChange{")
	s = append(s, "PubKeyIDs: "+fmt.Sprintf("%#v", this.PubKeyIDs)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BridgeOperationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sovereign.BridgeOperationsResponse{")
	s = append(s, "TxHashes: "+fmt.Sprintf("%#v", this.TxHashes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOutGoingBridgeData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BridgeOperations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeOperations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeOperations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BridgeOutGoingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeOutGoingData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeOutGoingData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PubKeysBitmap) > 0 {
		i -= len(m.PubKeysBitmap)
		copy(dAtA[i:], m.PubKeysBitmap)
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.PubKeysBitmap)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LeaderSignature) > 0 {
		i -= len(m.LeaderSignature)
		copy(dAtA[i:], m.LeaderSignature)
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.LeaderSignature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AggregatedSignature) > 0 {
		i -= len(m.AggregatedSignature)
		copy(dAtA[i:], m.AggregatedSignature)
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.AggregatedSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OutGoingOperations) > 0 {
		for iNdEx := len(m.OutGoingOperations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutGoingOperations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainID != 0 {
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutGoingOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutGoingOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutGoingOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeOutGoingDataValidatorSetChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeOutGoingDataValidatorSetChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeOutGoingDataValidatorSetChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PubKeyIDs) > 0 {
		for iNdEx := len(m.PubKeyIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PubKeyIDs[iNdEx])
			copy(dAtA[i:], m.PubKeyIDs[iNdEx])
			i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.PubKeyIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BridgeOperationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeOperationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeOperationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHashes) > 0 {
		for iNdEx := len(m.TxHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashes[iNdEx])
			copy(dAtA[i:], m.TxHashes[iNdEx])
			i = encodeVarintOutGoingBridgeData(dAtA, i, uint64(len(m.TxHashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutGoingBridgeData(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutGoingBridgeData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BridgeOperations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutGoingBridgeData(uint64(l))
		}
	}
	return n
}

func (m *BridgeOutGoingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOutGoingBridgeData(uint64(m.Type))
	}
	if m.ChainID != 0 {
		n += 1 + sovOutGoingBridgeData(uint64(m.ChainID))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOutGoingBridgeData(uint64(l))
	}
	if len(m.OutGoingOperations) > 0 {
		for _, e := range m.OutGoingOperations {
			l = e.Size()
			n += 1 + l + sovOutGoingBridgeData(uint64(l))
		}
	}
	l = len(m.AggregatedSignature)
	if l > 0 {
		n += 1 + l + sovOutGoingBridgeData(uint64(l))
	}
	l = len(m.LeaderSignature)
	if l > 0 {
		n += 1 + l + sovOutGoingBridgeData(uint64(l))
	}
	l = len(m.PubKeysBitmap)
	if l > 0 {
		n += 1 + l + sovOutGoingBridgeData(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovOutGoingBridgeData(uint64(m.Epoch))
	}
	return n
}

func (m *OutGoingOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOutGoingBridgeData(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOutGoingBridgeData(uint64(l))
	}
	return n
}

func (m *BridgeOutGoingDataValidatorSetChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PubKeyIDs) > 0 {
		for _, b := range m.PubKeyIDs {
			l = len(b)
			n += 1 + l + sovOutGoingBridgeData(uint64(l))
		}
	}
	if m.Epoch != 0 {
		n += 1 + sovOutGoingBridgeData(uint64(m.Epoch))
	}
	return n
}

func (m *BridgeOperationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxHashes) > 0 {
		for _, s := range m.TxHashes {
			l = len(s)
			n += 1 + l + sovOutGoingBridgeData(uint64(l))
		}
	}
	return n
}

func sovOutGoingBridgeData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutGoingBridgeData(x uint64) (n int) {
	return sovOutGoingBridgeData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BridgeOperations) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*BridgeOutGoingData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "BridgeOutGoingData", "BridgeOutGoingData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&BridgeOperations{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *BridgeOutGoingData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOutGoingOperations := "[]*OutGoingOperation{"
	for _, f := range this.OutGoingOperations {
		repeatedStringForOutGoingOperations += strings.Replace(f.String(), "OutGoingOperation", "OutGoingOperation", 1) + ","
	}
	repeatedStringForOutGoingOperations += "}"
	s := strings.Join([]string{`&BridgeOutGoingData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ChainID:` + fmt.Sprintf("%v", this.ChainID) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`OutGoingOperations:` + repeatedStringForOutGoingOperations + `,`,
		`AggregatedSignature:` + fmt.Sprintf("%v", this.AggregatedSignature) + `,`,
		`LeaderSignature:` + fmt.Sprintf("%v", this.LeaderSignature) + `,`,
		`PubKeysBitmap:` + fmt.Sprintf("%v", this.PubKeysBitmap) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutGoingOperation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutGoingOperation{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BridgeOutGoingDataValidatorSetChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BridgeOutGoingDataValidatorSetChange{`,
		`PubKeyIDs:` + fmt.Sprintf("%v", this.PubKeyIDs) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BridgeOperationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BridgeOperationsResponse{`,
		`TxHashes:` + fmt.Sprintf("%v", this.TxHashes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOutGoingBridgeData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BridgeOperations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutGoingBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeOperations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeOperations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BridgeOutGoingData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutGoingBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeOutGoingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutGoingBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeOutGoingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeOutGoingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutGoingOperations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutGoingOperations = append(m.OutGoingOperations, &OutGoingOperation{})
			if err := m.OutGoingOperations[len(m.OutGoingOperations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatedSignature = append(m.AggregatedSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregatedSignature == nil {
				m.AggregatedSignature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderSignature = append(m.LeaderSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderSignature == nil {
				m.LeaderSignature = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeysBitmap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeysBitmap = append(m.PubKeysBitmap[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeysBitmap == nil {
				m.PubKeysBitmap = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutGoingBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutGoingOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutGoingBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutGoingOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutGoingOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutGoingBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeOutGoingDataValidatorSetChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutGoingBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeOutGoingDataValidatorSetChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeOutGoingDataValidatorSetChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyIDs = append(m.PubKeyIDs, make([]byte, postIndex-iNdEx))
			copy(m.PubKeyIDs[len(m.PubKeyIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutGoingBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeOperationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutGoingBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeOperationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeOperationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashes = append(m.TxHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutGoingBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutGoingBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutGoingBridgeData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutGoingBridgeData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutGoingBridgeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutGoingBridgeData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutGoingBridgeData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutGoingBridgeData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutGoingBridgeData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutGoingBridgeData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutGoingBridgeData = fmt.Errorf("proto: unexpected end of group")
)
